name: PACK & PUBLISH
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

env:
    VERSION: 2.2.1

jobs:
  unit_testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Git Checkout
      - uses: actions/setup-go@v3
        name: Initialize Development environment
        with:
          go-version: '1.18.3' # The Go version to download (if necessary) and use.
      - run:  go mod tidy
        name: Download dependencies
      - run:  go test -coverprofile coverage.out ./...
        name: Execute
      - name: Upload Code coverage report into Github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage.out
          path: coverage.out
          retention-days: 0

  build:
    runs-on: ubuntu-latest
    needs:
      - unit_testing
    steps:
      - uses: actions/checkout@v3
        name: Git Checkout
      - uses: actions/setup-go@v3
        name: Initialize Development environment
        with:
          go-version: '1.18.3' # The Go version to download (if necessary) and use.
      - run:  go mod tidy
        name: Download dependencies
      - name: Create dist directory
        run: mkdir dist
      - run:  echo $VERSION > cmd/version.txt
        name: Update version file
      - name: Copy cmd/version.txt into dist directory
        run: sudo cp cmd/version.txt dist/version.txt
      - run:  go build cmd/main.go
        name: Build application
      - name: Move application into dist directory
        run:  sudo mv main dist/versioner
      - name: Upload application into Github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ./dist
          retention-days: 0

  publish-binary:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
        name: Git Checkout
      - uses: actions/download-artifact@master
        name: Download application from artifacts
        with:
          name: dist
          path: dist
      - name: Export VERSION environment variable
        run:  export VERSION=$(cat dist/version.txt)
      - name: Upload application into S3
        uses: medlypharmacy/s3-artifacts-action@master
        with:
          resource_type: "FILE"
          source_path: './dist/versioner'
          exclude_repo_from_destination_path: true
          destination_path: "/public/versioner/$VERSION-RELEASE/versioner"
          aws_region: ${{ secrets.AWS_REGION }}
          aws_access_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_s3_bucket_name: ${{ secrets.AWS_BUCKET }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Upload README.md into S3
        uses: medlypharmacy/s3-artifacts-action@master
        with:
          resource_type: "FILE"
          source_path: './README.md'
          exclude_repo_from_destination_path: true
          destination_path: "/public/versioner/$VERSION-RELEASE/README.md"
          aws_region: ${{ secrets.AWS_REGION }}
          aws_access_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_s3_bucket_name: ${{ secrets.AWS_BUCKET }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  publish-image:
    needs:
      - build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
        name: Git checkout
      - uses: actions/download-artifact@master
        name: Download  dist directory
        with:
          name: dist
          path: dist
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: "raitonbl/versioner:ubuntu-${{env.VERSION}}-RELEASE"